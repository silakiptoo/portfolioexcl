{"ast":null,"code":"import _createForOfIteratorHelper from\"C:/Users/user/OneDrive/Desktop/portfoliopro/client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";import _createClass from\"C:/Users/user/OneDrive/Desktop/portfoliopro/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";import _classCallCheck from\"C:/Users/user/OneDrive/Desktop/portfoliopro/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";var _class;import{TOTAL_SCREENS}from\"./commonUtils\";import{Subject}from\"rxjs\";var ScrollService=/*#__PURE__*/_createClass(//lets have a constructor here and add the scroll event to window\nfunction ScrollService(){var _this=this;_classCallCheck(this,ScrollService);/* SCROLL TO HIRE ME / CONTACT ME SCREEN */this.scrollToHireMe=function(){var contactMeScreen=document.getElementById(\"Contact Me\");if(!contactMeScreen)return;contactMeScreen.scrollIntoView({behavior:\"smooth\"});};this.scrollToHome=function(){var homeScreen=document.getElementById(\"Home\");if(!homeScreen)return;homeScreen.scrollIntoView({behavior:\"smooth\"});};/* CHECK IF ELEMENT IS IN VIEW .this simply means if the document appears fully on the screen or not */this.isElementInView=function(elem,type){var rec=elem.getBoundingClientRect();//this method returns a DOMRect object providing information about the size of an element and its position relative to the viewport.\n// the view port  refers to the part of the document you're viewing which is currently visible in its window\nvar elementTop=rec.top;var elemBottom=rec.bottom;/* when the element is Partially Visible */var partiallyVisible=elementTop<window.innerHeight&&elemBottom>=0;/* Completely Visible */var completelyVisible=elementTop>=0&&elemBottom<=window.innerHeight;switch(type){case\"partial\":return partiallyVisible;case\"complete\":return completelyVisible;default:return false;}};/* CHECK THE SCREEN THATS CURRENTLY UNDER VIEWPORT */ // which means the screen that is displayed fully\nthis.checkCurrentScreenUnderViewport=function(event){if(!event||Object.keys(event).length<1)return;var _iterator=_createForOfIteratorHelper(TOTAL_SCREENS),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var screen=_step.value;var screenFromDOM=document.getElementById(screen.screen_name);if(!screenFromDOM)continue;var fullyVisible=_this.isElementInView(screenFromDOM,\"complete\");var partiallyVisible=_this.isElementInView(screenFromDOM,\"partial\");if(fullyVisible||partiallyVisible){if(partiallyVisible&&!screen.alreadyRendered){//BROADCAST FADE IN EFFECT\nScrollService.currentScreenFadeIn.next({fadeInScreen:screen.screen_name});screen[\"alreadyRendered\"]=true;break;}if(fullyVisible){// BROADCAST SCREEN NAME\nScrollService.currentScreenBroadcaster.next({screenInView:screen.screen_name});break;}}}}catch(err){_iterator.e(err);}finally{_iterator.f();}};/* ADD SCROLL EVENT TO WINDOW */window.addEventListener(\"scroll\",this.checkCurrentScreenUnderViewport);});_class=ScrollService;/* SINGLETON CLASS INSTANCE */ScrollService.scrollHandler=new _class();/* Lets instantiate the subject BROADCASTERS */ScrollService.currentScreenBroadcaster=new Subject();ScrollService.currentScreenFadeIn=new Subject();export{ScrollService as default};","map":{"version":3,"names":["TOTAL_SCREENS","Subject","ScrollService","_createClass","_this","_classCallCheck","scrollToHireMe","contactMeScreen","document","getElementById","scrollIntoView","behavior","scrollToHome","homeScreen","isElementInView","elem","type","rec","getBoundingClientRect","elementTop","top","elemBottom","bottom","partiallyVisible","window","innerHeight","completelyVisible","checkCurrentScreenUnderViewport","event","Object","keys","length","_iterator","_createForOfIteratorHelper","_step","s","n","done","screen","value","screenFromDOM","screen_name","fullyVisible","alreadyRendered","currentScreenFadeIn","next","fadeInScreen","currentScreenBroadcaster","screenInView","err","e","f","addEventListener","_class","scrollHandler","default"],"sources":["C:/Users/user/OneDrive/Desktop/portfoliopro/client/src/utilities/ScrollService.js"],"sourcesContent":["import { TOTAL_SCREENS } from \"./commonUtils\";\r\nimport { Subject } from \"rxjs\";\r\n\r\nexport default class ScrollService {\r\n  /* SINGLETON CLASS INSTANCE */\r\n  static scrollHandler = new ScrollService();\r\n\r\n  /* Lets instantiate the subject BROADCASTERS */\r\n  static currentScreenBroadcaster = new Subject();\r\n  static currentScreenFadeIn = new Subject();\r\n\r\n  //lets have a constructor here and add the scroll event to window\r\n  constructor() {\r\n    /* ADD SCROLL EVENT TO WINDOW */\r\n    window.addEventListener(\"scroll\", this.checkCurrentScreenUnderViewport);\r\n  }\r\n\r\n  /* SCROLL TO HIRE ME / CONTACT ME SCREEN */\r\n  scrollToHireMe = () => {\r\n    let contactMeScreen = document.getElementById(\"Contact Me\");\r\n    if (!contactMeScreen) return;\r\n\r\n    contactMeScreen.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n  scrollToHome = () => {\r\n    let homeScreen = document.getElementById(\"Home\");\r\n    if (!homeScreen) return;\r\n\r\n    homeScreen.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n\r\n  /* CHECK IF ELEMENT IS IN VIEW .this simply means if the document appears fully on the screen or not */\r\n  isElementInView = (elem, type) => {\r\n    let rec = elem.getBoundingClientRect();\r\n    //this method returns a DOMRect object providing information about the size of an element and its position relative to the viewport.\r\n    // the view port  refers to the part of the document you're viewing which is currently visible in its window\r\n    let elementTop = rec.top;\r\n    let elemBottom = rec.bottom;\r\n\r\n    /* when the element is Partially Visible */\r\n    let partiallyVisible = elementTop < window.innerHeight && elemBottom >= 0;\r\n\r\n    /* Completely Visible */\r\n    let completelyVisible = elementTop >= 0 && elemBottom <= window.innerHeight;\r\n\r\n    switch (type) {\r\n      case \"partial\":\r\n        return partiallyVisible;\r\n\r\n      case \"complete\":\r\n        return completelyVisible;\r\n\r\n      default:\r\n        return false;\r\n    }\r\n  };\r\n\r\n  /* CHECK THE SCREEN THATS CURRENTLY UNDER VIEWPORT */\r\n  // which means the screen that is displayed fully\r\n  checkCurrentScreenUnderViewport = (event) => {\r\n    if (!event || Object.keys(event).length < 1) return;\r\n\r\n    for (let screen of TOTAL_SCREENS) {\r\n      let screenFromDOM = document.getElementById(screen.screen_name);\r\n      if (!screenFromDOM) continue;\r\n\r\n      let fullyVisible = this.isElementInView(screenFromDOM, \"complete\");\r\n      let partiallyVisible = this.isElementInView(screenFromDOM, \"partial\");\r\n\r\n      if (fullyVisible || partiallyVisible) {\r\n        if (partiallyVisible && !screen.alreadyRendered) {\r\n          //BROADCAST FADE IN EFFECT\r\n          ScrollService.currentScreenFadeIn.next({\r\n            fadeInScreen: screen.screen_name,\r\n          });\r\n          screen[\"alreadyRendered\"] = true;\r\n          break;\r\n        }\r\n\r\n        if (fullyVisible) {\r\n          // BROADCAST SCREEN NAME\r\n          ScrollService.currentScreenBroadcaster.next({\r\n            screenInView: screen.screen_name,\r\n          });\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  };\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}